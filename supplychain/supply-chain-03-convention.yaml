apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: convention-template
spec:
  configPath: .status.template
  params:
    - default: default
      name: serviceAccount
  ytt: |-
    #@ load("@ytt:data", "data")

    #@ def workload_param(name):
    #@   if not hasattr(data.values.workload.spec, "params"):
    #@     return None
    #@   end
    #@   for p in data.values.workload.spec.params:
    #@     if p.name == name:
    #@       return p.value
    #@     end
    #@   end
    #@ end

    apiVersion: conventions.apps.tanzu.vmware.com/v1alpha1
    kind: PodIntent
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app.kubernetes.io/component: intent
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      template:
        metadata:
          annotations:
            #@ if/end workload_param("debug"):
            apps.tanzu.vmware.com/debug: "true"
            #@ if/end workload_param("live-update"):
            apps.tanzu.vmware.com/live-update: "true"
            developer.conventions/target-containers: workload
          labels:
            app.kubernetes.io/component: run
            #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
            app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
            carto.run/workload-name: #@ data.values.workload.metadata.name
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          containers:
            - name: workload
              image: #@ data.values.image
              securityContext:
                runAsUser: 1000